name: Documentation Coverage

on:
  push:
    paths:
      - '**/src/**/*.rs'
      - '.github/copilot/agent.yml'
  pull_request:
    paths:
      - '**/src/**/*.rs'
      - '.github/copilot/agent.yml'

jobs:
  doc-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust (for rustdoc parsing if needed)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install yq (for reading agent.yml metadata)
        uses: mikefarah/yq@v4.44.3
        with:
          cmd: --version

      - name: Determine enforcement mode
        id: enforce
        run: |
          if [ -f .github/copilot/agent.yml ]; then
            ENFORCE=$(yq '.metadata.default.enforce_doc_on_public // false' .github/copilot/agent.yml)
          else
            ENFORCE=false
          fi
          echo "metadata enforce_doc_on_public: $ENFORCE"
          if [ "$ENFORCE" = "true" ]; then
            echo "fail=1" >> $GITHUB_OUTPUT
          else
            echo "fail=0" >> $GITHUB_OUTPUT
          fi

      - name: Run documentation coverage (inline heuristic)
        run: |
          set -euo pipefail
          FAIL=${{ steps.enforce.outputs.fail }}
          echo "Heuristic doc coverage scan (fail mode: $FAIL)"

          # Collect exercise directories (top-level containing Cargo.toml)
          mapfile -t DIRS < <(find . -maxdepth 1 -type d ! -name '.git' ! -name '.github' ! -name '.' | sort | while read -r d; do
            [ -f "$d/Cargo.toml" ] && echo "$d" || true
          done)

          total_checked=0
            total_missing=0

          scan_file() {
            local file="$1"
            [ -f "$file" ] || return 0
            local json tmp
            local IFS=$'\n'
            mapfile -t lines <"$file"
            local ln count_missing=0 count_checked=0
            for ((i=0; i<${#lines[@]}; i++)); do
              ln="${lines[$i]}"; tl="${ln##*( )}"
              if [[ $tl =~ ^pub([[:space:]]+|\().*(fn|struct|enum|trait|mod|type|const|static)[[:space:]]+([A-Za-z0-9_]+) ]]; then
                symbol_type="${BASH_REMATCH[2]}"; name_token="${BASH_REMATCH[3]}"; ((count_checked++))
                # backtrack for doc
                documented=0; j=$((i-1))
                while [ $j -ge 0 ]; do
                  prev="${lines[$j]}"; prev_trim="${prev##*( )}"
                  if [[ -z $prev_trim ]]; then ((j--)); continue; fi
                  if [[ $prev_trim =~ ^# ]]; then ((j--)); continue; fi
                  if [[ $prev_trim =~ ^///|^/\*\* ]]; then documented=1; fi
                  break
                done
                if [ $documented -eq 0 ]; then
                  echo "MISSING DOC: $file :: $symbol_type $name_token"
                  ((count_missing++))
                fi
              fi
            done
            echo "SUMMARY $file : checked=$count_checked missing=$count_missing"
            total_checked=$((total_checked + count_checked))
            total_missing=$((total_missing + count_missing))
          }

          for d in "${DIRS[@]}"; do
            scan_file "$d/src/lib.rs"
          done

          documented=$((total_checked - total_missing))
          percent=0
          if [ $total_checked -gt 0 ]; then
            percent=$(( 100 * documented / total_checked ))
          fi
          echo "== Coverage Summary =="
          echo "Public items:    $total_checked"
          echo "Documented:      $documented"
          echo "Undocumented:    $total_missing"
          echo "Coverage:        ${percent}%"

          if [ "$FAIL" = "1" ] && [ $total_missing -gt 0 ]; then
            echo "FAIL: Missing documentation detected (enforced)" >&2
            exit 1
          fi
          echo "Doc coverage scan complete (enforced=$FAIL)."

      - name: Summary
        if: always()
        run: echo "Doc coverage run complete."
